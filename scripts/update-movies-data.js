import axios from 'axios';
import cheerio from 'cheerio';
import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get the directory name in ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ÈÖçÁΩÆÈ°π
const config = {
  doubanBaseUrl: 'https://movie.douban.com/cinema',
  userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
  outputPath: path.join(__dirname, '..', 'data', 'movies-data.json'),
  backupPath: path.join(__dirname, '..', 'data', 'movies-data.backup.json'),
  maxRetries: 3,
  retryDelay: 5000, // 5Áßí
  requestDelay: 2000, // 2Áßí
  headers: {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',
    'Connection': 'keep-alive',
    'Cache-Control': 'max-age=0',
    'Referer': 'https://movie.douban.com/'
  }
};

// Âª∂ËøüÂáΩÊï∞
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

// Êï∞ÊçÆÊ∏ÖÁêÜÂáΩÊï∞
function cleanMovieData(movie) {
  return {
    ...movie,
    title: movie.title?.trim().replace(/\s+/g, ' '),
    id: movie.id?.trim(),
    type: "douban",
    mediaType: "movie"
  };
}

// Êï∞ÊçÆÈ™åËØÅÂáΩÊï∞
function validateMovie(movie) {
  return movie.id && movie.title && movie.id.length > 0 && movie.title.length > 0;
}

// Ëé∑ÂèñË±ÜÁì£ÁîµÂΩ±Êï∞ÊçÆÔºàÂ∏¶ÈáçËØïÊú∫Âà∂Ôºâ
async function fetchDoubanMovies(type, retryCount = 0) {
  try {
    const url = `${config.doubanBaseUrl}/${type}/shanghai/`;
    console.log(`üîÑ Ê≠£Âú®Ëé∑Âèñ${type === 'nowplaying' ? 'Ê≠£Âú®ÁÉ≠Êò†' : 'Âç≥Â∞Ü‰∏äÊò†'}ÁîµÂΩ±...`);

    // Ê∑ªÂä†ËØ∑Ê±ÇÂª∂Ëøü
    await delay(config.requestDelay);

    const response = await axios.get(url, {
      headers: config.headers,
      timeout: 10000
    });

    const $ = cheerio.load(response.data);
    const movies = new Map(); // ‰ΩøÁî®MapÂéªÈáç

    $(type === 'nowplaying' ? '#nowplaying .list-item' : '#showing-soon .item.mod').each((_, el) => {
      const $el = $(el);
      const movie = cleanMovieData({
        id: $el.attr('id') || $el.find('h3 a').attr('href')?.match(/subject\/(\d+)/)?.[1],
        title: type === 'nowplaying' 
          ? $el.attr('data-title') || $el.find('.stitle a').attr('title')
          : ($el.find('h3 a').text().trim() || $el.find('h3').text().trim().replace(/\s*\d{1,2}Êúà\d{1,2}Êó•.*$/, '')).trim()
      });

      if (validateMovie(movie)) {
        movies.set(movie.id, movie);
      }
    });

    return Array.from(movies.values());

  } catch (error) {
    console.error(`‚ùå ${type}Ëé∑ÂèñÂ§±Ë¥•:`, error.message);
    
    if (retryCount < config.maxRetries) {
      console.log(`‚è≥ Â∞ÜÂú®${config.retryDelay/1000}ÁßíÂêéÈáçËØï... (${retryCount + 1}/${config.maxRetries})`);
      await delay(config.retryDelay);
      return fetchDoubanMovies(type, retryCount + 1);
    }
    
    return [];
  }
}

// Â§á‰ªΩÂΩìÂâçÊï∞ÊçÆ
async function backupCurrentData() {
  try {
    await fs.copyFile(config.outputPath, config.backupPath);
    console.log('üì¶ Â∑≤Â§á‰ªΩÂΩìÂâçÊï∞ÊçÆ');
  } catch (error) {
    console.warn('‚ö†Ô∏è Â§á‰ªΩÊï∞ÊçÆÂ§±Ë¥•:', error.message);
  }
}

// ‰∏ªÂáΩÊï∞
async function main() {
  try {
    // Â§á‰ªΩÂΩìÂâçÊï∞ÊçÆ
    await backupCurrentData();

    const [nowplaying, later] = await Promise.all([
      fetchDoubanMovies('nowplaying'),
      fetchDoubanMovies('later')
    ]);

    const result = {
      last_updated: new Date(Date.now() + 8 * 3600 * 1000).toISOString().replace('Z', '+08:00'),
      nowplaying,
      later,
      total: nowplaying.length + later.length
    };

    // ÂàõÂª∫dataÁõÆÂΩïÔºàÂ¶ÇÊûú‰∏çÂ≠òÂú®Ôºâ
    await fs.mkdir(path.dirname(config.outputPath), { recursive: true });
    
    // ÂÜôÂÖ•Êñá‰ª∂
    await fs.writeFile(config.outputPath, JSON.stringify(result, null, 2));
    
    console.log(`
‚úÖ Êï∞ÊçÆÈááÈõÜÂÆåÊàêÔºÅ
üé¨ Ê≠£Âú®ÁÉ≠Êò†: ${nowplaying.length}ÈÉ®
üçø Âç≥Â∞Ü‰∏äÊò†: ${later.length}ÈÉ®
üìä ÊÄªËÆ°: ${result.total}ÈÉ®
üïí Êõ¥Êñ∞Êó∂Èó¥: ${result.last_updated}
`);

  } catch (error) {
    console.error('üí• Á®ãÂ∫èÊâßË°åÂá∫Èîô:', error);
    process.exit(1);
  }
}

// ÊâßË°å
main();
